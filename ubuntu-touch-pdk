#!/usr/bin/env bash

set -e

TMPDIR=""

trap ctrl_c INT

function ctrl_c {
    echo "CTRL-C received"
    for JOB in `jobs -p`; do
        kill -9 $JOB
    done
    exit 1
}

if [ "$(uname -m)" == "aarch64" ] || [ "$(uname -p)" == "arm64" ]  || [ "$(uname -m)" == "arm64" ]; then
    HOST_ARCH="arm64"
else
    HOST_ARCH="amd64"
fi

SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

PULL_IMG=no
SETUP=no
CLEARCACHE=no
LIST=no
RUN=no
PRINT_VERSION=no
NAME=default
ARCH="$HOST_ARCH"

function printHelp {
    echo "usage: $0 <options> <command> [<command> ..]"
    echo ""
    echo "Options:"
    printf "\t-a=|--arch=: Architecture override (optional, defaults to '$HOST_ARCH')\n"
    printf "\t             Possible values: arm64, amd64\n"
    printf "\t-n=|--name=: Name of the image (optional, defaults to 'default')\n"
    echo ""
    echo "Commands:"
    printf "\tsetup: Host OS preparations (recommended for first-time use)\n"
    printf "\tclear: Clean up all images\n"
    printf "\tpull: Download pre-generated image\n"
    printf "\trun: Run desired image\n"
    printf "\tlist: Show list of cached images\n"
}

# Argument parsing
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        pull)
            PULL_IMG=yes
            shift
        ;;
        setup)
            SETUP=yes
            shift
        ;;
        clear)
            CLEARCACHE=yes
            shift
        ;;
        easy)
            SETUP=yes
            PULL_IMG=yes
            shift
        ;;
        list)
            LIST=yes
            shift
        ;;
        run)
            RUN=yes
            shift
        ;;
        -v|--version)
            PRINT_VERSION=yes
            shift
        ;;
        "-n="*|"--name="*)
            NAME="${arg#*=}"
            shift
        ;;
        "-a="*|"--arch="*)
            ARCH="${arg#*=}"
            shift
        ;;
        -h|--help)
            printHelp
            exit 0
        ;;
        *)
            printHelp
            exit 1
        ;;
    esac
done

# Read common script variables
source $SCRIPTPATH/scripts/vars.sh
initCommonVars
mkdir -p "$CONFIG_ROOT"

# Source the config if available
if [ -f "$CONFIG_ROOT/config.sh" ]; then
    source "$CONFIG_ROOT/config.sh"
    IMG_CACHE="$DATA_ROOT/pdk-image-cache"
fi

if [ "$PRINT_VERSION" == "yes" ]; then
    echo "$VERSION ($CODENAME)"
    exit 0
fi

function printSeparator {
    echo "#####################################"
}

printSeparator
echo "Ubuntu Touch Platform Development Kit"
printSeparator
echo ""
echo "Executing tasks:"
printf "\tSetup? $SETUP\n"
printf "\tClear cache? $CLEARCACHE\n"
printf "\tList? $LIST\n"
printf "\tPull image? $PULL_IMG\n"
printf "\tRun an image? $RUN\n"

source $SCRIPTPATH/scripts/caches.sh
source $SCRIPTPATH/scripts/setup.sh
source $SCRIPTPATH/scripts/images.sh
source $SCRIPTPATH/scripts/mounts.sh
initImageVars
initSettingsVars

echo ""

# Warn when something's not right
if [ "$DATA_ROOT" == "" ] || [ "$SETUP" == "yes" ]; then
    echo "WARNING: You haven't set up your environment yet. Continuing with setup..."
    setup
    generateSettingsImage
    copySettingsIntoImage
fi

# List available images
if [ "$LIST" == "yes" ]; then
    listImages
fi

# Clear the cache
if [ "$CLEARCACHE" == "yes" ]; then
    clearCaches
fi

# Decide on pulling or creating an image
if [ "$PULL_IMG" == "yes" ]; then
    pullLatestImage
fi

# Aaand run it!
if [ "$RUN" == "yes" ]; then
    echo ""
    echo "Name of the environment: $NAME"
    echo ""
    if [ ! -d "$IMG_CACHE/$NAME" ]; then
        echo "Cache directory for image '$NAME' doesn't exist."
        echo "Consider pulling or creating an image yourself."
        exit 1
    fi
    if [ ! -f "$IMG_CACHE/$NAME/hdd.raw" ]; then
        echo "Hard disk for image '$NAME' doesn't exist."
        echo "Consider pulling or creating an image yourself."
        exit 1
    fi
    startVirtiofsd
    runImage
fi

for JOB in `jobs -p`; do
    kill -9 $JOB
done

exit 0
